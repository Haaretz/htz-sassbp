// *************************************
//
// #SETTINGS
// -> Default settings maps
//
////
/// @group Settings
////
//
// *************************************


/// Buttons settings
/// ---
/// @type map
/// ---
/// @prop {number} btn-radius
///   Buttons' default border radius
/// @prop {color} btn-bg 
///   Buttons' default background color
/// @prop {color} btn-hover
///   Buttons' default background color on hover
/// @prop {color} btn-color
///   Buttons' default color 
/// @prop {number | string} btn-font-weight
///   Buttons' default font-weight
/// @prop {string | list | number} btn-padding.base
///   Buttons' base padding
/// @prop {string | list | number} btn-padding.tight
///   Tight buttons' padding
/// @prop {string | list | number} btn-padding.loose
///   Loose buttons' padding
/// @prop {string | list | number} btn-padding.inline
///   Inline buttons' padding
/// ---
/// @group Settings
/// @group UI
/// ---
$s-buttons: (
  btn-radius: "",
  btn-bg: "",
  btn-hover: "",
  btn-color: "",
  btn-font-weight: "",
  btn-padding: (
    base: (),
    tight: (),
    loose: (),
    inline: (),
  ),
  btn-center: false,
  btn-full: false,
  btn-inline: false,
  btn-normal: false,
  btn-tight: false,
  btn-loose: false,
  btn-large: false,
  btn-huge: false,
  btn-mega: false,
  btn-inactive: false,
  btn-negative: false,
  btn-positive: false,
  btn-sales: false,
  btn-fb: false,
  btn-tw: false,
  btn-gplus: false,
  btn-soft: false,
  btn-hard: false,
  btn-text: false,
) !default;



/// Color classes settings
/// ---
/// @type map
/// ---
/// @prop {map} color-classes.[name]
///   Name of the class to generate, excluding the prefix 
///   (c- for color, bg- for background)
/// @prop {color} color-classes.[name].color
///   The color value to use in the generated class(es)
/// @prop {bool} color-classes.[name].bg-class
///   generate a background-color helper class?
/// @prop {bool} color-classes.[name].color-class
///   generate a color helper class?
/// ---
/// @group Settings
/// @group Color
/// ---
$s-color-classes: (
  color-classes: (
  ),
) !default;



/// Embeded elements settings
/// ---
/// @type map
/// ---
/// @prop {string} embed-space
///   The named amount of space after an embed element.
///   Can be one of [base | double | three-quarts | half | quarter ]
/// @prop {number} intrinsic-ratio
///   The aspect ratio for intrinsic-ratio elements.
/// @prop {string} embed-el
///   The child elements that will be affected
/// ---
/// @group Settings
/// ---
$s-embed: (
  embed-space: "",
  intrinsic-ratio: 16/9,
  embed-el: '> embed, > iframe, > object',
  vid-chrome-30: false,
) !default;



/// Turn webfonts on/off
/// ---
/// @type map
/// ---
/// @prop {map} webfonts
/// @prop {map} webfonts.[font-name]
/// ---
/// @group Settings
/// @group Typography
$s-webfonts: (
  webfonts: (
  ),
) !default;



/// form  settings
/// ---
/// @prop {list} select-font-stack
///   Font-stack to use in select elements (to fix a bug with webfonts in Chrome)
/// @prop {color} input-props.focus
///   The border color of form elements on focus
/// @prop {list} input-props.focus-shadow
///   Box-shadow values for focused inputs.
/// @prop {string} input-props.padding
///   Named spacing unit for the inner padding of inputs
///   Can be one of [base | double | three-quarts | half | quarter]
/// @prop {number} input-props.radius
///   The base border radius of inputs.
/// @prop {list} input-props.border-style
///   The base border style (e.g. solid #f0f) of inputs
/// @prop {number} input-props.width
///   The base border width of input elements.
/// @prop {map | bool} input-props.placeholder
///   Generate styles according to 
///   nested keys, if not false.
/// @prop {string} form-field-space.base
///   The named spacing unit to use as margin bottom on base form-field wrapper elements.
///   Can be one of [base | double | three-quarts | half | quarter]
/// @prop {string} form-field-space.loose
///   The named spacing unit to use as margin loose on base form-field wrapper elements.
///   Can be one of [base | double | three-quarts | half | quarter]
/// ---
/// @type map
/// ---
/// @group Settings
/// @group Forms
/// ---
$s-form: (
  select-font-stack: (),
  input-props: (
    focus: "",
    focus-shadow: "",
    padding: "",
    radius: "",
    border-style: (),
    width: "",
    placeholder: (
      color: "",
      weight: "",
    ),
  ),
  form-field-space: (
    base: "",
    loose: "",
  ),

  form-tight: false,
  form-flush: false,
  form-field-loose: flase,
  form-field-flush: false,
) !default;



/// Grid settings
/// ---
/// @prop {number} grid-cols
///   The maximun number of grid columns available.
/// @prop {string} grid-gutter
///   A named spacing unit for the basic gutter-size between grid__cells
/// @prop {string} grid-gutter-t
///   A named spacing unit for gutter-size between grid__cells in tight grids
/// @prop {string} grid-gutter-xt
///   A named spacing unit for gutter-size between grid__cells in x-tight grids
/// @prop {string} grid-gutter-xxt
///   A named spacing unit for gutter-size between grid__cells in xx-tight grids
/// @prop {string} grid-gutter-l
///   A named spacing unit for gutter-size between grid__cells in loose grids
/// ---
/// @type map
/// ---
/// @group Settings
/// @group Layout
$s-grid: (
  grid-cols: 1,
  grid-gutter: "",
  grid-gutter-t: "",
  grid-gutter-xt: "",
  grid-gutter-xxt: "",
  grid-gutter-l: "",
  grid-center: false,
  grid-left: false,
  grid-right: false,
  grid-rev: false,
  grid-middle: false,
  grid-bottom: false,
  grid-loose: false,
  grid-tight: false,
  grid-xtight: false,
  grid-xxtight: false,
  grid-flush: false,
  grid-rules: false,
  grid-rules--b: false,

  g-cell-center: false,
) !default;



/// Inclusion/exclusion rules for helper classes
/// Booleans to determine which helper classes will be generated.
/// ---
/// @type map
/// @group Settings
$s-helpers: (
  h-group: false,
  h-vis-hidden: false,

  h-hidden: (
    base: false,
    from-m: false,
    from-l: false,
    from-xl: false,
    to-m: false,
    to-l: false,
    to-xl: false,
  ),
  
  h-shown: (
    block: (
      base: false,
      from-m: false,
      from-l: false,
      from-xl: false,
      to-m: false,
      to-l: false,
      to-xl: false,
    ),
    inline-block: (
      base: false,
      from-m: false,
      from-l: false,
      from-xl: false,
      to-m: false,
      to-l: false,
      to-xl: false,
    ),
    inline: (
      base: false,
      from-m: false,
      from-l: false,
      from-xl: false,
      to-m: false,
      to-l: false,
      to-xl: false,
    ),
  ),

  legacy-display: false,
  login-hide: false,
  opacity: false,
  floats: false,
  position: false,
  text-alignment: false,
  borders: false,
  h-animable: false,
  h-ellipsis: false,
) !default;




/// Island object settings
/// ---
/// @type map
/// ---
/// @prop {string} island-space
///   The named spacing unit to use for spacing Island objects
///   Can be one of [base | three-quarts | half | quarter]
/// @prop {string} island-loose-space
///   The named spacing unit to use for spacing loose Island objects
///   Can be one of [base | three-quarts | half | quarter]
/// @prop {string} islet-space
///   The named spacing unit to use for spacing Islet objects
///   Can be one of [base | three-quarts | half | quarter]
/// ---
/// @group Settings
/// ---
$s-island: (
  island-space: "",
  island-loose-space: "",
  islet-space: "",

  island-flush: false,
  islet: false,
  islet-flush: false,
  island-loose: false,
  island-loose-flush: false,
) !default;



/// Lists settings
/// ---
/// @type map
/// ---
/// @group Settings
/// @group Lists
$s-lists: (
  bare-list: false,
  ui-list: (
    generate: false,
    border-width: "",
    border-style: (),
    trailer-lines: "",
    margin-bottom: "",
  ),
  ui-list--tight: (
    generate: false,
    margin-bottom: "",
  ),
  inline-list: (
    base: false,
    separated: false,
    separator-char: '|',
    separator-space: "",
  ),
) !default;



/// Media-object settings
/// ---
/// @prop {string} media-space
///   A named spacing unit to be used for spacing
///   media__fig from media__content
///   Can be one of [base | double | three-quarts | half | quarter ]
/// @prop {string} media-space-l
///   A named spacing unit to be used for spacing
///   media__fig from media__content on media--large objects
///   Can be one of [base | double | three-quarts | half | quarter ]
/// @prop {string} media-space-s
///   A named spacing unit to be used for spacing
///   media__fig from media__content on media--small objects
///   Can be one of [base | double | three-quarts | half | quarter ]
/// ---
/// @type map
/// ---
/// @group Settings
/// ---
$s-media: (
  media-space: "",
  media-space-l: "",
  media-space-s: "",
  media-rev: false,
  media-large: false,
  media-small: false,
  media-flush: false,
  media-bottom: false,
  media-middle: false,
) !default;



/// Modal settings
/// ---
/// @prop {color} modal-wrapper-color
///   The background color of the modal-wrapper
/// @prop {number} modal-wrapper-z
/// @prop {color} modal-color
///   The default background color of a modal
/// @prop {list} modal-shadow
///   Values for the default shadow of a modal
/// @prop {list} modal-border
///   Values for modals' default border
/// @prop {number} modal-radius
///   Modals' default border-radius
/// ---
/// @type map
/// ---
/// @group Settings
/// ---
$s-modal: (
  modal-wrapper-color: "",
  modal-wrapper-z: "",
  modal-color: "",
  modal-shadow: (),
  modal-border: false,
  modal-radius: "", 

  modal-fixed: false,
) !default;



/// Inclusion/exclusion settings for spacing helper classes.
/// ---
/// @prop {map} [type-directon]
///   Can be on of [margin-[top|bottom|left|right|sides|ends]] or
///   [padding-[top|bottom|left|right|sides|ends]]
/// @prop {map} [type-directon].[breakpoint-name]
///  determines which spacing classes will be 
///  generated for each [type-direction] at each breakpoint.
///  Boolean keys are: `base`, `flush`, `tight`, `xtight`, `xxtight` and `loose`
/// ---
/// @type map
/// ---
/// @group Settings
$s-spacing: (
  // margins
  margin-top: (
    // name: (
    //   base: false,
    //   flush: false,
    //   tight: false,
    //   xtight: false,
    //   xxtight: false,
    //   loose: false,
    // ),
  ),

  margin-bottom: (
  ),

  margin-left: (
  ),

  margin-ends: (
  ),

  margin-sides: (
  ),

  // ----- PADDING ----- //
  padding-top: (
  ),

  padding-right: (
  ),

  padding-bottom: (
  ),

  padding-left: (
  ),

  padding-ends: (
  ),

  padding-sides: (
  ),
) !default;




/// Typographic settings
/// ---
/// @type map
/// ---
/// @prop {bool} type.body-hack
///   Enables/disables a hack that overrides 
///   styles from the CM's WYSIWYG editor
/// @prop {map} type.map
///   class-name for the `tag-name` map.
///
/// @prop {bool | list} type.micro-bps
///   A list of breakpoint for which
///   responsive modifiers of .t-micro 
///   will be generated for.
/// @prop {bool | list} type.milli-bps
///   A list of breakpoint for which
///   responsive modifiers of .t-milli 
///   will be generated for.
/// @prop {bool | list} type.zeta-bps
///   A list of breakpoint for which
///   responsive modifiers of .t-zeta 
///   will be generated for.
/// @prop {bool | list} type.epsilon-bps
///   A list of breakpoint for which
///   responsive modifiers of .t-epsilon 
///   will be generated for.
/// @prop {bool | list} type.delta-bps
///   A list of breakpoint for which
///   responsive modifiers of .t-delta 
///   will be generated for.
/// @prop {bool | list} type.gamma-bps
///   A list of breakpoint for which
///   responsive modifiers of .t-gamma 
///   will be generated for.
/// @prop {bool | list} type.beta-bps
///   A list of breakpoint for which
///   responsive modifiers of .t-beta 
///   will be generated for.
/// @prop {bool | list} type.alpha-bps
///   A list of breakpoint for which
///   responsive modifiers of .t-alpha 
///   will be generated for.
/// @prop {bool | list} type.kilo-bps
///   A list of breakpoint for which
///   responsive modifiers of .t-kilo 
///   will be generated for.
/// @prop {bool | list} type.mega-bps
///   A list of breakpoint for which
///   responsive modifiers of .t-mega 
///   will be generated for.
/// @prop {bool | list} type.giga-bps
///   A list of breakpoint for which
///   responsive modifiers of .t-giga 
///   will be generated for.
///
/// @prop {number} ellipsis.width
///   Width of the [...] block.
///
/// @prop {map} ellipsis.[bp-name]
///   Names of breakpoints for which to create
///   line-delimited classes.
/// @prop {bool | list} ellipsis.[bp-name].[size-name]
///   A list of unitless numbers, each representing
///   a hight in line numbers.
///   e.g
///   ```
///   ellipsis.s.milli: (3,5)
///   ```
///   Will cause the generation of :
///   `.t-milli--3lines` and `t-milli--5lines`
/// ---
/// @group Settings
/// ---
$s-typography: (
  type: (
    body-hack: false,
    map: (
      // zeta: h6,
    ),
    micro-bps: false,
    milli-bps: false,
    // list example: zeta-bps: l xl,
    zeta-bps: false,
    epsilon-bps: false,
    delta-bps: false,
    gamma-bps: false,
    beta-bps: false,
    alpha-bps: false,
    kilo-bps: false,
    mega-bps: false,
    giga-bps: false,
  ),
  ellipsis-width: "",
  ellipsis: (
    s: (
      micro: false,
      // list example: milli: (2, 3,),
      milli: false,
      base: false,
      zeta: false,
      epsilon: false,
      delta: false,
      gamma: false,
      beta: false,
      alpha: false,
      kilo: false,
      mega: false,
      giga: false,
    ),
    m: (
      micro: false,
      milli: false,
      base: false,
      zeta: false,
      epsilon: false,
      delta: false,
      gamma: false,
      beta: false,
      alpha: false,
      kilo: false,
      mega: false,
      giga: false,
    ),
    l: (
      micro: false,
      milli: false,
      base: false,
      zeta: false,
      epsilon: false,
      delta: false,
      gamma: false,
      beta: false,
      alpha: false,
      kilo: false,
      mega: false,
      giga: false,
    ),
    xl: (
      micro: false,
      milli: false,
      base: false,
      zeta: false,
      epsilon: false,
      delta: false,
      gamma: false,
      beta: false,
      alpha: false,
      kilo: false,
      mega: false,
      giga: false,
    ),
  ),
) !default;


/// Card element settings
/// ---
/// type map
/// ---
/// @prop {color} card-bg
///   Sets the default background color of cards.
/// @prop {color} card-hr-color
///   Sets the default color of cards' section hr.
/// @prop {number} card-hr-height
///   Sets the default height of cards' section hr.
/// @prop {list | null} card-shadow
///   Sets the default box-shadow of cards if list.
///   Avoid generating box-shadow property if null.
/// @prop {list | null} card-shadow--hover
///   Sets the default box-shadow of hovered cards if list.
///   Avoid generating box-shadow property if null.
/// @prop {number} card-padding
///   Sets the default padding of cards.
/// @prop {map} card-sizes
///   Holds names and values of spacing modifiers to produce.
/// @prop {string} card-sizes.name
///   Strings to be used as suffixees in spacing modifiers.
/// @prop {number} card-sizes.value
///   The amount of padding to apply to a spacing modifier.
/// ---
$s-card: (
    card-bg: '',
    card-container-bg: '',
    card-hr-color: '',
    card-hr-height: '',
    card-shadow: '',
    card-shadow--hover: '',
    card-padding: '',
    card-sizes: (
      // loose: space(double),
      // tight: space(three-quarts),
      // xtight: space(half),
      // xxtight: space(quarter),
      // flush: 0,
    )
) !default;
